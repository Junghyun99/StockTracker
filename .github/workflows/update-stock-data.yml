name: Update Stock Data

on:
  schedule:
    # 평일 한국시간 오전 9시 (UTC 0시)
    - cron: '0 0 * * 1-5'
    # 평일 한국시간 오후 3시 30분 (UTC 6시 30분)
    - cron: '30 6 * * 1-5'
    # 매일 오후 6시 (UTC 9시)
    - cron: '0 9 * * *'
  workflow_dispatch: # 수동 실행 가능
  push:
    branches: [ main, master ]
    paths:
      - 'data/stocks.json'
      - '.github/workflows/update-stock-data.yml'

permissions:
  contents: write
  pages: write
  actions: read

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yfinance requests flask
    
    - name: Create update script
      run: |
        cat > auto_update.py << 'EOF'
        import sys
        import os
        sys.path.append(os.getcwd())

        try:
            from stock_tracker import StockTracker
            import logging

            logging.basicConfig(level=logging.INFO)
            tracker = StockTracker()

            print(f'현재 추적 중인 종목 수: {len(tracker.stocks)}')

            if len(tracker.stocks) > 0:
                try:
                    updated_count = tracker.refresh_all_stocks()
                    print(f'업데이트된 종목 수: {updated_count}')
                    
                    stocks = tracker.get_tracked_stocks()
                    for stock in stocks:
                        name = stock.get('name', '')
                        decline = stock.get('decline_rate_formatted', 'N/A')
                        status = stock.get('decline_status', 'unknown')
                        print(f'{name}: {decline} ({status})')
                except Exception as e:
                    print(f'데이터 업데이트 중 오류: {e}')
            else:
                print('추적 중인 종목이 없습니다.')
                
        except ImportError as e:
            print(f'모듈 import 오류: {e}')
            print('필요한 파일들이 있는지 확인하세요.')
        except Exception as e:
            print(f'예상치 못한 오류: {e}')
        EOF

    - name: Run stock data update
      run: |
        echo "Starting stock data update..."
        python auto_update.py
    
    - name: Generate static HTML
      run: |
        echo "Generating static HTML for GitHub Pages..."
        python static_export.py
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Changes detected"
          git status
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git add data/stocks.json docs/
        git commit -m "Auto-update stock data - $(date '+%Y-%m-%d %H:%M:%S UTC')"
        git push
    
    - name: Create summary script
      run: |
        cat > create_summary.py << 'EOF'
        from stock_tracker import StockTracker
        import json
        from datetime import datetime

        tracker = StockTracker()
        stocks = tracker.get_tracked_stocks()

        if stocks:
            low_count = len([s for s in stocks if s.get('decline_status') == 'low'])
            medium_count = len([s for s in stocks if s.get('decline_status') == 'medium'])
            high_count = len([s for s in stocks if s.get('decline_status') == 'high'])
            
            print(f'**총 추적 종목:** {len(stocks)}개')
            print(f'**주의권 (10% 이하):** {low_count}개')
            print(f'**경고권 (10-30%):** {medium_count}개')
            print(f'**발동권 (30% 이상):** {high_count}개')
            print('')
            print('### 📈 종목별 현황')
            print('| 종목명 | 현재가 | 고점 | 하락률 | 상태 |')
            print('|--------|--------|------|--------|------|')
            
            for stock in sorted(stocks, key=lambda x: x.get('decline_rate', 0) or 0, reverse=True):
                name = stock.get('name', 'N/A')
                current = stock.get('current_price_formatted', 'N/A')
                high = stock.get('recent_high_formatted', 'N/A')
                decline = stock.get('decline_rate_formatted', 'N/A')
                status_map = {'low': '주의권', 'medium': '경고권', 'high': '발동권'}
                status = status_map.get(stock.get('decline_status'), 'N/A')
                print(f'| {name} | {current} | {high} | {decline} | {status} |')
        else:
            print('추적 중인 종목이 없습니다.')
        EOF

    - name: Create summary
      run: |
        echo "## 📊 Stock Data Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Update Time:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        python create_summary.py >> $GITHUB_STEP_SUMMARY